# frozen_string_literal: true

fastlane_require 'xcodeproj'
fastlane_require 'dotenv'
fastlane_require 'open-uri'
fastlane_require 'git'

UI.user_error!('Please run fastlane via `bundle exec`') unless FastlaneCore::Helper.bundler?

########################################################################
# Constants and Environment Variables
########################################################################

# Paths that are re-used across multiple lanes
PROJECT_ROOT_FOLDER = File.dirname(File.expand_path(__dir__))
WORKSPACE_PATH = File.join(PROJECT_ROOT_FOLDER, 'WordPress.xcworkspace')
DERIVED_DATA_PATH = File.join(PROJECT_ROOT_FOLDER, 'DerivedData')
BUILD_PRODUCTS_PATH = File.join(PROJECT_ROOT_FOLDER, 'Artifacts')

# Env file paths to load
ENV_FILE_NAME = '.wpios-env.default'
USER_ENV_FILE_PATH = File.join(Dir.home, ENV_FILE_NAME)
SECRETS_DIR = File.join(Dir.home, '.configure', 'wordpress-ios', 'secrets')
PROJECT_ENV_FILE_PATH = File.join(SECRETS_DIR, 'project.env')
APP_STORE_CONNECT_KEY_PATH = File.join(SECRETS_DIR, 'app_store_connect_fastlane_api_key.json')

# Other defines used across multiple lanes
REPOSITORY_NAME = 'WordPress-iOS'

APP_STORE_VERSION_BUNDLE_IDENTIFIER = 'org.wordpress'
EXTENSIONS_BUNDLE_IDENTIFIERS = %w[
  WordPressShare
  WordPressDraftAction
  WordPressTodayWidget
  WordPressStatsWidgets
  WordPressNotificationServiceExtension
  WordPressNotificationContentExtension
  WordPressAllTimeWidget
  WordPressThisWeekWidget
  WordPressIntents
].map { |suffix| "#{APP_STORE_VERSION_BUNDLE_IDENTIFIER}.#{suffix}" }
ALL_BUNDLE_IDENTIFIERS = [APP_STORE_VERSION_BUNDLE_IDENTIFIER, *EXTENSIONS_BUNDLE_IDENTIFIERS]
JETPACK_APP_IDENTIFIER = 'com.automattic.jetpack'

# Environment Variables â€” used by lanes but also potentially actions
Dotenv.load(USER_ENV_FILE_PATH)
Dotenv.load(PROJECT_ENV_FILE_PATH)
GHHELPER_REPO = 'wordpress-mobile/wordpress-iOS'
ENV['PROJECT_NAME'] = 'WordPress'
ENV['PUBLIC_CONFIG_FILE'] = File.join(PROJECT_ROOT_FOLDER, 'config', 'Version.Public.xcconfig')
ENV['INTERNAL_CONFIG_FILE'] = File.join(PROJECT_ROOT_FOLDER, 'config', 'Version.internal.xcconfig')
ENV['DOWNLOAD_METADATA'] = './fastlane/download_metadata.swift'
ENV['PROJECT_ROOT_FOLDER'] = PROJECT_ROOT_FOLDER + '/'
ENV['APP_STORE_STRINGS_FILE_NAME'] = 'AppStoreStrings.po'
ENV['FL_RELEASE_TOOLKIT_DEFAULT_BRANCH'] = 'trunk'

# Use this instead of getting values from ENV directly. It will throw an error if the requested value is missing
def get_required_env(key)
  UI.user_error!("Environment variable '#{key}' is not set. Have you setup #{USER_ENV_FILE_PATH} correctly?") unless ENV.key?(key)
  ENV[key]
end


########################################################################
# Imports of other Fastfiles
########################################################################

import 'lanes/build.rb'
import 'lanes/codesign.rb'
import 'lanes/localization.rb'
import 'lanes/release.rb'
import 'lanes/screenshots.rb'

########################################################################

before_all do |lane|
  # Skip these checks/steps for test lane (not needed for testing)
  next if lane == :test_without_building

  # Ensure we use the latest version of the toolkit
  check_for_toolkit_updates unless is_ci || ENV['FASTLANE_SKIP_TOOLKIT_UPDATE_CHECK']

  # Fixes weird Keychain bugs
  setup_ci

  # Check that the env files exist
  unless is_ci || File.file?(USER_ENV_FILE_PATH)
    example_path = 'fastlane/env/user.env-example '
    UI.user_error! "#{ENV_FILE_NAME} not found: Please copy #{example_path} to #{USER_ENV_FILE_PATH} and fill in the values."
  end
  unless File.file?(PROJECT_ENV_FILE_PATH)
    UI.user_error!("project.env not found at #{PROJECT_ENV_FILE_PATH}: Make sure your configuration is up to date with `rake dependencies`")
  end
end

default_platform(:ios)

########################################################################
# Helper Lanes
########################################################################
desc 'Verifies that Gutenberg is referenced by release version and not by commit'
lane :gutenberg_dep_check do |_options|
  res = ''

  File.open File.join(PROJECT_ROOT_FOLDER, 'Podfile') do |file|
    res = file.find { |line| line =~ /^(?!\s*#)(?=.*\bgutenberg\b).*(\bcommit|tag\b){1}.+/ }
  end

  UI.user_error!("Can't find any reference to Gutenberg!") if res.empty?
  if res.include?('commit')
    UI.user_error!("Gutenberg referenced by commit!\n#{res}") unless UI.interactive?

    unless UI.confirm("Gutenberg referenced by commit!\n#{res}\nDo you want to continue anyway?")
      UI.user_error!('Aborted by user request. Please fix Gutenberg reference and try again.')
    end
  end

  UI.message("Gutenberg version: #{(res.scan(/'([^']*)'/))[0][0]}")
end

def extracted_release_notes_file_path(app:)
  paths = {
    wordpress: File.join(PROJECT_ROOT_FOLDER, 'WordPress', 'Resources', 'release_notes.txt'),
    jetpack: File.join(PROJECT_ROOT_FOLDER, 'WordPress', 'Jetpack', 'Resources', 'release_notes.txt')
  }
  paths[app.to_sym] || UI.user_error!("Invalid app name passed to lane: #{app}")
end

def print_release_notes_reminder
  message = <<~MSG
    The extracted release notes for WordPress and Jetpack were based on the same source.
    Don't forget to remove any item that doesn't apply to the respective app before editorialization.

    You can find the extracted notes at:

    - #{extracted_release_notes_file_path(app: :wordpress)}
    - #{extracted_release_notes_file_path(app: :jetpack)}
  MSG

  message.lines.each { |l| UI.important(l.chomp) }
end

# FIXME: This ought to be extracted into the release toolkit, ideally in an
# configurable way but with smart defaults.
#
# See discussion here
# https://github.com/wordpress-mobile/WordPress-iOS/pull/16805/files/5f3009c5e0d01448cf0369656dddc1fe3757e45f#r664069046
def read_version_from_config
  fastlane_require 'Xcodeproj'

  # If the file is not available, the method will raise so we should be fine
  # not handling that case. We'll never return an empty string.
  File.open(File.join(PROJECT_ROOT_FOLDER, 'Config', 'Version.public.xcconfig')) do |config|
    configuration = Xcodeproj::Config.new(config)
    configuration.attributes['VERSION_SHORT']
  end
end

def ensure_sentry_installed
  # This is an action provided by the Sentry Fastlane plugin that verifies the
  # CLI is installed and its version is compatible with the plugin's
  # expectation.
  sentry_check_cli_installed
end

# This function is Buildkite-specific
def generate_installable_build_number

  if ENV['BUILDKITE']
    commit = ENV['BUILDKITE_COMMIT'][0,7]
    branch = ENV['BUILDKITE_BRANCH']
    pr_num = ENV['BUILDKITE_PULL_REQUEST']

    return pr_num == 'false' ? "#{branch}-#{commit}" : "pr#{pr_num}-#{commit}"
  else
    repo = Git.open(PROJECT_ROOT_FOLDER)
    commit = repo.current_branch
    branch = repo.revparse('HEAD')[0, 7]

    return "#{branch}-#{commit}"
  end
end

def trigger_buildkite_release_build(branch:, beta:)
  buildkite_trigger_build(
    buildkite_organization: 'automattic',
    buildkite_pipeline: 'wordpress-ios',
    branch: branch,
    environment: { BETA_RELEASE: beta },
    pipeline_file: 'release-builds.yml'
  )
end

# Application-agnostic settings for the `upload_to_app_store` action, also
# known as `deliver`.
UPLOAD_TO_APP_STORE_COMMON_PARAMS = {
  app_version: read_version_from_config,
  skip_binary_upload: true,
  overwrite_screenshots: true,
  phased_release: true,
  precheck_include_in_app_purchases: false,
  api_key_path: APP_STORE_CONNECT_KEY_PATH,
  app_rating_config_path: File.join(PROJECT_ROOT_FOLDER, 'fastlane', 'metadata', 'ratings_config.json')
}
