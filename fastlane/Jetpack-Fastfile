# frozen_string_literal: true


  #####################################################################################
  # build_and_upload_installable_build
  # -----------------------------------------------------------------------------------
  # This lane builds the app and upload it for adhoc testing
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane build_and_upload_installable_build [version_long:<version_long>]
  #
  # Example:
  # bundle exec fastlane build_and_upload_installable_build
  # bundle exec fastlane build_and_upload_installable_build build_number:123
  #####################################################################################
  desc "Builds and uploads a Jetpack installable build"
  lane :build_and_upload_jetpack_installable_build do | options |
    ensure_sentry_installed

    jetpack_alpha_code_signing

    # Get the current build version, and update it if needed
    version_config_path = File.join(PROJECT_ROOT_FOLDER, 'config', 'Version.internal.xcconfig')
    versions = Xcodeproj::Config.new(File.new(version_config_path)).to_hash
    build_number = generate_installable_build_number
    UI.message("Updating build version to #{build_number}")
    versions['VERSION_LONG'] = build_number
    new_config = Xcodeproj::Config.new(versions)
    new_config.save_as(Pathname.new(version_config_path))

    gym(
      scheme: "Jetpack",
      workspace: WORKSPACE_PATH,
      export_method: "enterprise",
      configuration: "Release-Alpha",
      clean: true,
      output_directory: BUILD_PRODUCTS_PATH,
      output_name: "Jetpack Alpha",
      derived_data_path: DERIVED_DATA_PATH,
      export_team_id: ENV["INT_EXPORT_TEAM_ID"],
      export_options: { method: "enterprise" }
    )

    appcenter_upload(
      api_token: get_required_env("APPCENTER_API_TOKEN"),
      owner_name: "automattic",
      owner_type: "organization",
      app_name: "jetpack-installable-builds",
      file: lane_context[SharedValues::IPA_OUTPUT_PATH],
      dsym: lane_context[SharedValues::DSYM_OUTPUT_PATH],
      destinations: "Collaborators",
      notify_testers: false
    )

    sentry_upload_dsym(
      auth_token: get_required_env("SENTRY_AUTH_TOKEN"),
      org_slug: 'a8c',
      project_slug: 'jetpack-ios',
      dsym_path: lane_context[SharedValues::DSYM_OUTPUT_PATH],
    )

    return if ENV['BUILDKITE_PULL_REQUEST'].nil?

    download_url = Actions.lane_context[SharedValues::APPCENTER_DOWNLOAD_LINK]
    UI.message("Successfully built and uploaded installable build here: #{download_url}")
    install_url = 'https://install.appcenter.ms/orgs/automattic/apps/jetpack-installable-builds/'

    comment_body = "You can test the <strong>Jetpack</strong> changes on this Pull Request by downloading it from AppCenter <a href='#{install_url}'>here</a> with build number: <code>#{build_number}</code>. IPA is available <a href='#{download_url}'>here</a>. If you need access to this, you can ask a maintainer to add you."

    comment_on_pr(
      project: 'wordpress-mobile/wordpress-ios',
      pr_number: Integer(ENV['BUILDKITE_PULL_REQUEST']),
      reuse_identifier: 'jetpack-installable-build-link',
      body: comment_body
    )
  end

  desc "Build for Testing"
  lane :build_jetpack_for_testing do | options |
    run_tests(
      workspace: WORKSPACE_PATH,
      scheme: "Jetpack",
      derived_data_path: DERIVED_DATA_PATH,
      build_for_testing: true,
      deployment_target_version: options[:ios_version],
    )
  end

  desc "Build for TestFlight"
  lane :build_and_upload_jetpack_for_app_store do |options|

    jetpack_appstore_code_signing

    gym(
      scheme: "Jetpack",
      workspace: WORKSPACE_PATH,
      clean: true,
      export_team_id: get_required_env("EXT_EXPORT_TEAM_ID"),
      output_directory: BUILD_PRODUCTS_PATH,
      derived_data_path: DERIVED_DATA_PATH,
      export_options: { method: "app-store" }
    )

    testflight(
      skip_waiting_for_build_processing: true,
      team_id: "299112",
      api_key_path: APP_STORE_CONNECT_KEY_PATH
    )

    sentry_upload_dsym(
      auth_token: get_required_env("SENTRY_AUTH_TOKEN"),
      org_slug: 'a8c',
      project_slug: 'jetpack-ios',
      dsym_path: lane_context[SharedValues::DSYM_OUTPUT_PATH]
    )

  end

########################################################################
# Jetpack Fastlane match code signing
########################################################################
private_lane :jetpack_alpha_code_signing do |options|
  match(
    type: "enterprise",
    team_id: get_required_env("INT_EXPORT_TEAM_ID"),
    readonly: true,
    app_identifier: "com.jetpack.alpha"
  )
end

private_lane :jetpack_internal_code_signing do |options|
  match(
    type: "enterprise",
    team_id: get_required_env("INT_EXPORT_TEAM_ID"),
    readonly: true,
    app_identifier: "com.jetpack.internal"
  )
end

private_lane :jetpack_appstore_code_signing do |options|
  match(
    type: "appstore",
    team_id: get_required_env("EXT_EXPORT_TEAM_ID"),
    readonly: true,
    app_identifier: JETPACK_APP_IDENTIFIER
  )
end

